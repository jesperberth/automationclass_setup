---
- hosts: storage
  become: yes
  vars:

  tasks:
# Setup /dev/sdb
    - name: create partion /dev/sdb
      parted:
       device: /dev/sdb
       number: 1
       flags: [ lvm ]
       state: present
    
    - name: create volume group vg.data
      lvg:
       vg: vg.data
       pvs: /dev/sdb1

    - name: create logical data disk on vg.data
      lvol:
       vg: vg.data
       lv: lv.data{{ item.name }}
       size: 5g
       state: present
      loop:
          - { 'name': 'user1' }
          - { 'name': 'user2' }
          - { 'name': 'user3' }
          - { 'name': 'user4' }
          - { 'name': 'user5' }
          - { 'name': 'user6' }
          - { 'name': 'user7' }
          - { 'name': 'user8' }
          - { 'name': 'user9' }
          - { 'name': 'user10' }

    - name: create filesystem xfs on lv.data
      filesystem:
       fstype: xfs
       dev: /dev/mapper/vg.data-lv.data{{ item.name }}
      loop:
          - { 'name': 'user1' }
          - { 'name': 'user2' }
          - { 'name': 'user3' }
          - { 'name': 'user4' }
          - { 'name': 'user5' }
          - { 'name': 'user6' }
          - { 'name': 'user7' }
          - { 'name': 'user8' }
          - { 'name': 'user9' }
          - { 'name': 'user10' }     
          - { 'name': 'user11' }
          - { 'name': 'user12' }  
    
    - name: create directory for lv.data mountpoint
      file:
       path: /storage
       state: directory
    
    - name: add fstab entry
      mount: 
       name: /storage/{{ item.name }}
       src: /dev/mapper/vg.data-lv.data{{ item.name }}
       fstype: xfs 
       opts: defaults
       state: present
      loop:
          - { 'name': 'user1' }
          - { 'name': 'user2' }
          - { 'name': 'user3' }
          - { 'name': 'user4' }
          - { 'name': 'user5' }
          - { 'name': 'user6' }
          - { 'name': 'user7' }
          - { 'name': 'user8' }
          - { 'name': 'user9' }
          - { 'name': 'user10' }
          - { 'name': 'user11' }
          - { 'name': 'user12' }      
    
    - name: mount disk
      shell: mount -a
      args:
       warn: false

    - name: Install nfs
      dnf:
       name: nfs-utils
       state: present
    
    - name: Create directorys for export
      file:
       path: "/storage/{{ item.name }}"
       state: directory
      loop:
          - {'name': 'user1'}
          - {'name': 'user2'}
          - {'name': 'user3'}
          - {'name': 'user4'}
          - {'name': 'user5'}
          - {'name': 'user6'}
          - {'name': 'user7'}
          - {'name': 'user8'}
          - {'name': 'user9'}
          - {'name': 'user10'}
          - {'name': 'user11'}
          - {'name': 'user12'}  

    - name: Create exports
      blockinfile:
       path: /etc/exports
       block: |
          /storage/user1 10.172.1.0/24(rw,no_root_squash)
          /storage/user2 10.172.1.0/24(rw,no_root_squash)
          /storage/user3 10.172.1.0/24(rw,no_root_squash)
          /storage/user4 10.172.1.0/24(rw,no_root_squash)
          /storage/user5 10.172.1.0/24(rw,no_root_squash)
          /storage/user6 10.172.1.0/24(rw,no_root_squash)
          /storage/user7 10.172.1.0/24(rw,no_root_squash)
          /storage/user8 10.172.1.0/24(rw,no_root_squash)
          /storage/user9 10.172.1.0/24(rw,no_root_squash)
          /storage/user10 10.172.1.0/24(rw,no_root_squash)
          /storage/user11 10.172.1.0/24(rw,no_root_squash)
          /storage/user12 10.172.1.0/24(rw,no_root_squash)

    - name: Start rpcbind
      systemd:
       name: rpcbind
       state: started
       enabled: yes

    - name: Start nfs-server
      systemd:
       name: nfs-server
       state: started
       enabled: yes

    - name: Allow nfs in firewall
      firewalld:
        zone: FedoraServer
        service: nfs
        permanent: yes
        state: enabled

    - name: Allow rpc-bind in firewall
      firewalld:
        zone: FedoraServer
        service: rpc-bind
        permanent: yes
        state: enabled

    - name: Allow mountd in firewall
      firewalld:
        zone: FedoraServer
        service: mountd
        permanent: yes
        state: enabled

    - name: firewalld reload
      command: firewall-cmd --reload