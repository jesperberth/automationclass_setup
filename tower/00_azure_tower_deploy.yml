---
- hosts: localhost
  connection: local
  vars:
    location: northeurope
    virtualnetwork: TowerNetwork
    subnet: Servers
    rgname: TowerRG
    adminUser: awx
    ssh_public_key: "{{lookup('file', '~/.ssh/id_rsa.pub') }}"
    tag_owner: arrow
    tag_project: ansibleawx
    servers:
      - tower01
      - tower02
      - tower03
      - tower04
      - tower05
      - tower06
      - tower07
      - tower08
      - tower09
      - tower10
      - tower11
      - tower12
      - tower13

  tasks:
    - name: Azure Virtual Network
      include_role:
        name: jesperberth.az_virtualnetwork
      vars:
        resourcegroup: "{{ rgname }}"
        virtualnetwork_name: "{{ virtualnetwork }}"
        cidr: 10.1.0.0/16
        subnet_name: "{{ subnet }}"
        subnet_cidr: 10.1.0.0/24
        owner: "{{ tag_owner }}"
        project: "{{ tag_project }}"

    - name: Azure Network Security Group
      include_role:
        name: jesperberth.az_securitygroup
      vars:
        resourcegroup: "{{ rgname }}"
        networksecuritygroup_name: "{{ item.sg_name }}"
        rulename: "{{ item.name }}"
        ruleprotocol: "{{ item.protocol }}"
        rulesourceaddress: "{{ item.sourceaddr }}"
        ruledestinationportrange: "{{ item.destport }}"
        ruleaccess: "{{ item.access }}"
        rulepriority: "{{ item.pri }}"
        ruledirection: "{{ item.dir }}"
        owner: "{{ tag_owner }}"
        project: "{{ tag_project }}"
      loop:
        - {
            sg_name: "SG_Network",
            name: "AllowSSH",
            protocol: "Tcp",
            sourceaddr: "0.0.0.0/0",
            destport: "22",
            access: "Allow",
            pri: "102",
            dir: "Inbound",
          }
        - {
            sg_name: "SG_Network",
            name: "AllowHTTP",
            protocol: "Tcp",
            sourceaddr: "0.0.0.0/0",
            destport: "80",
            access: "Allow",
            pri: "103",
            dir: "Inbound",
          }
        - {
            sg_name: "SG_Network",
            name: "AllowHTTPS",
            protocol: "Tcp",
            sourceaddr: "0.0.0.0/0",
            destport: "443",
            access: "Allow",
            pri: "104",
            dir: "Inbound",
          }
        - {
            sg_name: "SG_Network",
            name: "Allow8443",
            protocol: "Tcp",
            sourceaddr: "0.0.0.0/0",
            destport: "8443",
            access: "Allow",
            pri: "105",
            dir: "Inbound",
          }

    - name: Create network interfaces
      azure_rm_networkinterface:
        name: "{{ item }}_nic01"
        resource_group: "{{ rgname }}"
        virtual_network: "{{ virtualnetwork }}"
        subnet_name: "{{ subnet }}"
        security_group: "SG_Network"
        ip_configurations:
          - name: "{{ item }}_nic01_ipconfig"
            public_ip_address_name: "{{ item }}_public_ip"
            primary: true
        tags:
          owner: "{{ tag_owner }}"
          project: "{{ tag_project }}"
      loop: "{{ servers }}"
      async: 1000
      poll: 0
      register: create_nic

    - name: Wait for Network Interfaces
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 5
      with_items: "{{ create_nic.results }}"

    # Create Virtual Machines
    - name: Create Virtual Machines
      azure_rm_virtualmachine:
        resource_group: "{{ rgname }}"
        name: "{{ item }}"
        os_type: "Linux"
        admin_username: "{{ adminUser }}"
        ssh_password_enabled: false
        ssh_public_keys:
          - path: "/home/{{ adminUser }}/.ssh/authorized_keys"
            key_data: "{{ ssh_public_key }}"
        managed_disk_type: Standard_LRS
        state: present
        image:
          offer: "RHEL"
          publisher: "RedHat"
          sku: "8_4"
          version: "latest"
        vm_size: "Standard_D2s_v3"
        network_interfaces: "{{ item }}_nic01"
        tags:
          owner: "{{ adminUser }}"
          project: "{{ tag_project }}"
      loop: "{{ servers }}"
      async: 1000
      poll: 0
      register: create_vm

    - name: Wait for Virtual Machines
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 100
      delay: 5
      with_items: "{{ create_vm.results }}"
