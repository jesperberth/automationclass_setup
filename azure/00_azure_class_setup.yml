---
- hosts: localhost
  connection: local
  vars:
    location: northeurope
    virtualnetwork: automationNetwork
    subnet: Servers
    tag_owner: arrow
    tag_project: ansibletraining

  tasks:
    - name: Azure Virtual Network
      ansible.builtin.include_role:
        name: jesperberth.az_virtualnetwork
      vars:
        resourcegroup: "ansible-{{ adminUser }}"
        virtualnetwork_name: "{{ virtualnetwork }}"
        cidr: 10.1.0.0/16
        subnet_name: "{{ subnet }}"
        subnet_cidr: 10.1.0.0/24
        owner: "{{ tag_owner }}"
        project: "{{ tag_project }}"

    - name: Azure Network Security Group
      ansible.builtin.include_role:
        name: jesperberth.az_securitygroup
      vars:
        resourcegroup: "ansible-{{ adminUser }}"
        networksecuritygroup_name: "{{ item.nsgname }}"
        rulename: "{{ item.name }}"
        ruleprotocol: "{{ item.proto }}"
        rulesourceaddress: "{{ item.sourceadd }}"
        ruledestinationportrange: "{{ item.destportrange }}"
        ruleaccess: "{{ item.access }}"
        rulepriority: "{{ item.pri }}"
        ruledirection: "{{ item.dir }}"
        owner: "{{ tag_owner }}"
        project: "{{ tag_project }}"
      loop:
        - {nsgname: 'SG_Network', name: 'AllowSSH', proto: 'Tcp', sourceadd: '0.0.0.0/0', destportrange: '22', access: 'Allow', pri: '102', dir: 'Inbound'}
        - {nsgname: 'SG_Network', name: 'AllowRDP', proto: 'Tcp', sourceadd: '0.0.0.0/0', destportrange: '3389', access: 'Allow', pri: '103', dir: 'Inbound'}
        - {nsgname: 'SG_Network', name: 'AllowHTTP', proto: 'Tcp', sourceadd: '0.0.0.0/0', destportrange: '80', access: 'Allow', pri: '104', dir: 'Inbound'}
        - {nsgname: 'SG_Network', name: 'AllowHTTPS', proto: 'Tcp', sourceadd: '0.0.0.0/0', destportrange: '443', access: 'Allow', pri: '105', dir: 'Inbound'}

    - name: Create network interfaces
      azure_rm_networkinterface:
        name: "{{ item }}_nic01"
        resource_group: "ansible-{{ adminUser }}"
        virtual_network: "{{ virtualnetwork }}"
        subnet_name: "{{ subnet }}"
        security_group: "SG_Network"
        ip_configurations:
          - name: "{{ item }}_nic01_ipconfig"
            public_ip_address_name: "{{ item }}_public_ip"
            primary: true
        tags:
          owner: "{{ tag_owner }}"
          project: "{{ tag_project }}"
      loop:
        - ansible
        - server1
        - server2
        - server3
        - server4
        - student
      async: 1000
      poll: 0
      register: create_nic

    - name: Wait for Network Interfaces
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 5
      with_items: "{{ create_nic.results }}"

  # Create Virtual Machines
    - name: Create Virtual Machines
      azure_rm_virtualmachine:
        resource_group: "ansible-{{ adminUser }}"
        name: "{{ item.name }}"
        os_type: "{{ item.os }}"
        admin_username: "{{ adminUser }}"
        admin_password: "{{ adminPassword }}"
        managed_disk_type: Premium_LRS
        state: present
        image:
          offer: "{{ item.offer }}"
          publisher: "{{ item.pub }}"
          sku: "{{ item.sku }}"
          version: latest
        vm_size: "{{ item.size }}"
        network_interfaces: "{{ item.name }}_nic01"
        tags:
          owner: "{{ adminUser }}"
          delete: ansibletraining
      loop:
        - {name: 'ansible', size: 'Standard_B2ms', os: 'Linux', offer: 'RHEL', pub: 'RedHat', sku: '9_1'}
        - {name: 'server1', size: 'Standard_B2s', os: 'Linux', offer: 'RHEL', pub: 'RedHat', sku: '9_1'}
        - {name: 'server2', size: 'Standard_B2s', os: 'Linux', offer: 'RHEL', pub: 'RedHat', sku: '9_1'}
        - {name: 'server3', size: 'Standard_B2ms', os: 'Windows', offer: 'WindowsServer', pub: 'MicrosoftWindowsServer', sku: '2022-Datacenter'}
        - {name: 'server4', size: 'Standard_B2ms', os: 'Windows', offer: 'WindowsServer', pub: 'MicrosoftWindowsServer', sku: '2022-Datacenter'}
        - {name: 'student', size: 'Standard_D4s_v3', os: 'Windows', offer: 'windows-11', pub: 'microsoftwindowsdesktop', sku: 'win11-22h2-pro'}
      async: 1000
      poll: 0
      register: create_vm

    - name: Wait for Virtual Machines
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 100
      delay: 10
      with_items: "{{ create_vm.results }}"

    - name: Create Azure VM extension to extend /home
      azure_rm_virtualmachineextension:
        name: ansible-adddisk
        resource_group: "ansible-{{ adminUser }}"
        virtual_machine_name: ansible
        publisher: Microsoft.Azure.Extensions
        virtual_machine_extension_type: CustomScript
        type_handler_version: "2.1"
        settings: '{"commandToExecute": " lvm lvextend --size 20G /dev/rootvg/homelv && xfs_growfs /dev/mapper/rootvg-homelv", "skipDos2Unix": true}'
        auto_upgrade_minor_version: true

    - name: Create Azure VM extension to add regkeys on student
      azure_rm_virtualmachineextension:
        name: student-regkey
        resource_group: "ansible-{{ adminUser }}"
        virtual_machine_name: student
        publisher: Microsoft.Compute
        virtual_machine_extension_type: CustomScriptExtension
        type_handler_version: "1.10"
        settings: '{"fileUris": [ "https://raw.githubusercontent.com/jesperberth/automationclass_setup/main/azure/change_reg.ps1" ],"commandToExecute": " powershell -ExecutionPolicy Unrestricted -File change_reg.ps1 "}'
        auto_upgrade_minor_version: true
