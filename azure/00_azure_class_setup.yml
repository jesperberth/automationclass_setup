---
- hosts: localhost
  connection: local
  vars:
    location: northeurope
    virtualnetwork: automationNetwork
    subnet: Servers
    tag_owner: arrow
    tag_project: ansibletraining

  vars_prompt:
    - name: resourcegroup_input
      prompt: "Type the name of your Azure Resource Group"
      private: no
    - name: adminUser
      prompt: "Type the name of your root/administrator account"
      private: no
    - name: adminPassword
      prompt: "Type the password of your root/administrator account"
      private: no

  tasks:
    - name: Azure Resource Group
      include_role:
        name: jesperberth.az_resourcegroup
      vars:
        resourcegroup: "{{ resourcegroup_input }}"
        owner: "{{ tag_owner }}"
        project: "{{ tag_project }}"

    - name: Azure Virtual Network
      include_role:
        name: jesperberth.az_virtualnetwork
      vars:
        resourcegroup: "{{ resourcegroup_input }}"
        virtualnetwork_name: "{{ virtualnetwork }}"
        cidr: 10.1.0.0/16
        subnet_name: "{{ subnet }}"
        subnet_cidr: 10.1.0.0/24
        owner: "{{ tag_owner }}"
        project: "{{ tag_project }}"
        
    - name: Azure Network Security Group
      include_role:
        name: jesperberth.az_securitygroup
      vars:
        resourcegroup: "{{ resourcegroup_input }}"
        networksecuritygroup_name: "{{ item.networksecuritygroup_name }}"
        rulename: "{{ item.rulename }}"
        ruleprotocol: "{{ item.ruleprotocol }}"
        rulesourceaddress: "{{ item.rulesourceaddress }}"
        ruledestinationportrange: "{{ item.ruledestinationportrange }}"
        ruleaccess: "{{ item.ruleaccess }}"
        rulepriority: "{{ item.rulepriority }}"
        ruledirection: "{{ item.ruledirection }}"
        owner: "{{ tag_owner }}"
        project: "{{ tag_project }}"
      loop:
        - { networksecuritygroup_name: 'SG_Network', rulename: 'AllowSSH',  ruleprotocol: 'Tcp', rulesourceaddress: '0.0.0.0/0', ruledestinationportrange: '22', ruleaccess: 'Allow', rulepriority: '102', ruledirection: 'Inbound' }
        - { networksecuritygroup_name: 'SG_Network', rulename: 'AllowRDP',  ruleprotocol: 'Tcp', rulesourceaddress: '0.0.0.0/0', ruledestinationportrange: '3389', ruleaccess: 'Allow', rulepriority: '103', ruledirection: 'Inbound' }
          
    - name: Create network interfaces
      azure_rm_networkinterface:
        name: "{{ item }}_nic01"
        resource_group: "{{ resourcegroup_input }}"
        virtual_network: "{{ virtualnetwork }}"
        subnet_name: "{{ subnet }}"
        security_group: "SG_Network"
        ip_configurations:
          - name: "{{ item }}_nic01_ipconfig"
            public_ip_address_name: "{{ item }}_public_ip"
            primary: True
        tags:
           owner: "{{ tag_owner }}"
           project: "{{ tag_project }}"
      loop:
        - ansible
        - server1
        - server2
        - server3
        - server4
      async: 1000
      poll: 0
      register: create_nic
  
    - name: Wait for Network Interfaces
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 30
      delay: 5
      with_items: "{{ create_nic.results }}"
  
  # Create Virtual Machines     
    - name: Create Virtual Machines
      azure_rm_virtualmachine:
        resource_group: "{{ resourcegroup_input }}"
        name: "{{ item.name }}"
        os_type: "{{ item.os_type }}"
        admin_username: "{{ adminUser }}"
        admin_password: "{{ adminPassword }}"
        managed_disk_type: Standard_LRS
        state: present
        image:
          offer: "{{ item.offer }}"
          publisher: "{{ item.publisher }}"
          sku: "{{ item.sku }}"
          version: "{{ item.version }}"
        vm_size: "{{ item.size }}"
        network_interfaces: "{{ item.name }}_nic01"
        tags:
            owner: "{{ adminUser }}"
            delete: ansibletraining
      loop:
          - { 'name': 'ansible', 'size': 'Standard_A2_v2', 'os_type': 'Linux', 'offer': 'RHEL', 'publisher': 'RedHat', 'sku': '8', 'version': 'latest' }
          - { 'name': 'server1', 'size': 'Standard_A1_v2', 'os_type': 'Linux', 'offer': 'RHEL', 'publisher': 'RedHat', 'sku': '8', 'version': 'latest' }
          - { 'name': 'server2', 'size': 'Standard_A1_v2', 'os_type': 'Linux', 'offer': 'RHEL', 'publisher': 'RedHat', 'sku': '8', 'version': 'latest' }
          - { 'name': 'server3', 'size': 'Standard_A1_v2', 'os_type': 'Windows', 'offer': 'WindowsServer', 'publisher': 'MicrosoftWindowsServer', 'sku': '2019-Datacenter', 'version': 'latest' }
          - { 'name': 'server4', 'size': 'Standard_A1_v2', 'os_type': 'Windows', 'offer': 'WindowsServer', 'publisher': 'MicrosoftWindowsServer', 'sku': '2019-Datacenter', 'version': 'latest' }
      async: 1000
      poll: 0
      register: create_vm
  
    - name: Wait for Virtual Machines
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 100
      delay: 5
      with_items: "{{ create_vm.results }}"

    - name: Add Datadisk to ansible VM
      azure_rm_manageddisk:
        name: datadisk
        location: "{{ location }}"
        resource_group: "{{ resourcegroup_input }}"
        disk_size_gb: 32
        managed_by: ansible